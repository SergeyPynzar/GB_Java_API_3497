package org.example.seminar_4;

import java.util.*;

public class Main {
    public static void main(String[] args) {
//        splitString();
        int[] arr = {1,4,3,5,6,7};
        addStackArray(arr);
        addQueueArray(arr);
    }

    /**
     * üìî –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
     * 1. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞
     * text~num
     * 1. –ù—É–∂–Ω–æ —Ä–∞—Å—Å–ø–ª–∏—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ ~, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å text –≤ —Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é num.
     * 2. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ print~num, –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ num –≤ —Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ —É–¥–∞–ª—è–µ—Ç –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞.
     */
    private static void splitString() {
        int num = 0;
        String text = null;
        String str;

        System.out.println("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ text~num: ");
        Scanner scanner = new Scanner(System.in);
        str = scanner.nextLine();
        System.out.println("–í—ã –≤–≤–µ–ª–∏ —Å—Ç—Ä–æ–∫—É: ");

        String[] words = str.split("~");
        text = words[0];
        num = Integer.parseInt(words[1]);

        List<String> list = new LinkedList<>();
        for (int i = 0; i < 10; i++) {
            if(num != 0) {
                list.add(i, "default");
                if(num == i) {
                    list.add(num, text);
                }
            }
        }
        System.out.println(list);

        System.out.println("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ print~num: ");
        str = scanner.nextLine();
        System.out.println("–ü–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ");

        words = str.split("~");
        num = Integer.parseInt(words[1]);

        list.remove(num);

        System.out.println(list);
    }

    /**
     * üìî 1) –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–º–µ—â–∞–µ—Ç –∏—Ö –≤ —Å—Ç—ç–∫ –∏
     * –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –∫–æ–Ω—Å–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—ç–∫–∞.
     * 2) –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–º–µ—â–∞–µ—Ç –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å –∏
     * –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –∫–æ–Ω—Å–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—á–µ—Ä–µ–¥–∏.
     */
    private static void addStackArray(int[] array) {
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < array.length; i++) {
            stack.push(array[i]);
        }
        System.out.println(stack);
    }

    private static void addQueueArray(int[] array) {
        Deque<Integer> queue = new ArrayDeque<>();
        for (int i = 0; i < array.length; i++) {
            queue.push(array[i]);
        }
        System.out.println(queue);
    }

    /**
     * 1. –ü—É—Å—Ç—å –¥–∞–Ω LinkedList —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç ‚Äú–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–π‚Äù —Å–ø–∏—Å–æ–∫.
     * 2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ—á–µ—Ä–µ–¥—å —Å –ø–æ–º–æ—â—å—é LinkedList —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏:enqueue() - –ø–æ–º–µ—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏, dequeue() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ, first() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –Ω–µ —É–¥–∞–ª—è—è.
     * 3. –í –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–ø–µ—Ä–∞—Ü–∏—é.
     */

}
